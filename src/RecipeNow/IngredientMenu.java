/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RecipeNow;

import static java.awt.image.ImageObserver.HEIGHT;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;

/**
 *
 * @author Youngmin
 */
public class IngredientMenu extends javax.swing.JFrame implements GuiHelper {

    /**
     * Creates new form NewIngredient
     */
    
    DatabaseHelper db;
    
    public IngredientMenu(DatabaseHelper db)  {
        initComponents();
        this.db = db;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newIng_addIng = new javax.swing.JButton();
        newIng_ingName = new javax.swing.JTextField();
        newIng_ingCal = new javax.swing.JTextField();
        newIng_isDairy = new javax.swing.JCheckBox();
        newIng_editIng = new javax.swing.JButton();
        newIng_deleteIng = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ingredient Menu");

        newIng_addIng.setText("Add Ingredient");
        newIng_addIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newIng_addIngActionPerformed(evt);
            }
        });

        newIng_ingName.setText("Enter Ingredient Name");
        newIng_ingName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newIng_ingNameMouseClicked(evt);
            }
        });

        newIng_ingCal.setText("Enter Ingredient Calorie");
        newIng_ingCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newIng_ingCalMouseClicked(evt);
            }
        });

        newIng_isDairy.setText("Dairy");

        newIng_editIng.setText("Edit Ingredient");
        newIng_editIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newIng_editIngActionPerformed(evt);
            }
        });

        newIng_deleteIng.setText("Delete Ingredient");
        newIng_deleteIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newIng_deleteIngActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(newIng_ingCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(newIng_ingName, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newIng_isDairy, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newIng_addIng, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newIng_editIng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newIng_deleteIng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newIng_ingName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newIng_ingCal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newIng_isDairy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newIng_addIng)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newIng_editIng, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newIng_deleteIng)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void newIng_ingNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newIng_ingNameMouseClicked
        // Empty text field when user clicks 
        if(newIng_ingName.getText().equals("Enter Ingredient Name") || newIng_ingName.getText().isEmpty()) {
            newIng_ingName.setText(""); 
            
        }
    }//GEN-LAST:event_newIng_ingNameMouseClicked

    private void newIng_ingCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newIng_ingCalMouseClicked
        // Empty text field when user clicks 
        if(newIng_ingCal.getText().equals("Enter Ingredient Calorie") || newIng_ingCal.getText().isEmpty()) {
            newIng_ingCal.setText(""); 
        }  
    }//GEN-LAST:event_newIng_ingCalMouseClicked

    private void newIng_addIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newIng_addIngActionPerformed
        // Check if name and calorie text fields are filled 
        boolean checkNull = checkNull();
        boolean hasDuplicate;
        int dairy = newIng_isDairy.isSelected() == true ? 1 : 0;
        
        if(!checkNull) {
            String ingredName = newIng_ingName.getText();
            int ingredCal;
            try {
            ingredCal = Integer.parseInt(newIng_ingCal.getText());
            } catch (NumberFormatException ex) {
                System.out.println("NumberFormatException: " + ex.getMessage());
                JOptionPane.showMessageDialog(rootPane, "Please only enter numeric values", "Error", HEIGHT);
                resetComponent();
                
                // exit function
                return;
            }
            try {
                hasDuplicate = this.db.ingredientInsertIntoTable(ingredName, ingredCal, dairy);
                if(hasDuplicate) {
                    System.out.println("Add Ingredient Failed");
                    JOptionPane.showMessageDialog(rootPane, "The ingredient is already in the database or Server Connection has failed", "Error", HEIGHT);
                } else {
                    System.out.println("Add Ingredient Success " + " Ingredient Name: " + newIng_ingName.getText() + " Ingredient Calories: " + newIng_ingCal.getText());
                    JOptionPane.showMessageDialog(rootPane, "Add Ingredient Success", "Success", HEIGHT);
                }
            } catch (SQLException ex) {
                System.out.println("SQL Exception: " + ex.getMessage());
            } 
        }
        resetComponent();
        
    }//GEN-LAST:event_newIng_addIngActionPerformed

    private void newIng_editIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newIng_editIngActionPerformed
        // Check if name and calorie text fields are filled 
        boolean checkNull = checkNull();
        boolean hasDuplicate = false;
        int dairy = newIng_isDairy.isSelected() == true ? 1 : 0;
        String ingredName = newIng_ingName.getText();
        int ingredCal;
        //System.out.println(checkNull());
        if(!checkNull) {
            try {
                ingredCal = Integer.parseInt(newIng_ingCal.getText());
            } catch (NumberFormatException ex) {
                System.out.println("NumberFormatException: " + ex.getMessage());
                JOptionPane.showMessageDialog(rootPane, "Please only enter numeric values", "Error", HEIGHT);
                resetComponent();
                // exit function
                return; 
            }
            
            try {
                hasDuplicate = this.db.ingredientEditIntoTable(ingredName, ingredCal, dairy);
            } catch (SQLException ex) {
                System.out.println("SQL Exception: " + ex.getMessage());
            }
            if(hasDuplicate) {
                System.out.println("Edit Ingredient Failed");
                JOptionPane.showMessageDialog(rootPane, "The ingredient is already in the database or Server Connection has failed", "Error", HEIGHT);
            } else {
                System.out.println("Edit Ingredient Success" + " Ingredient Name: " + newIng_ingName.getText() + " Ingredient Calories " + newIng_ingCal.getText());
                JOptionPane.showMessageDialog(rootPane, "Edit Ingredient Success", "Success", HEIGHT);
            } 
        }
        resetComponent();
    }//GEN-LAST:event_newIng_editIngActionPerformed

    private void newIng_deleteIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newIng_deleteIngActionPerformed
        // Check if name and calorie text fields are filled 
        boolean checkNull = newIng_ingName.getText().equals("Enter Ingredient Name") || newIng_ingName.getText().isEmpty();
        boolean deleteSuccess = false;
        if(!checkNull) {
            try {
                deleteSuccess = this.db.ingredientDeleteIntoTable(newIng_ingName.getText());
            } catch (SQLException ex) {
                System.out.println("SQL Exception: " + ex.getMessage());
            }
            
            if(deleteSuccess) {
                System.out.println("Delete Ingredient Failed");
                JOptionPane.showMessageDialog(rootPane, "Delete Ingredient Failed", "Error", HEIGHT);
            } else {
                System.out.println("Delete Ingredient Success " + " Ingredient Name:" + newIng_ingName.getText());
                JOptionPane.showMessageDialog(rootPane, "Delete Ingredient Success", "Success", HEIGHT);
            }
            
        }
    }//GEN-LAST:event_newIng_deleteIngActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton newIng_addIng;
    private javax.swing.JButton newIng_deleteIng;
    private javax.swing.JButton newIng_editIng;
    private javax.swing.JTextField newIng_ingCal;
    private javax.swing.JTextField newIng_ingName;
    private javax.swing.JCheckBox newIng_isDairy;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean checkNull() {
       // Check if the two textfields are null or default    
        return newIng_ingName.getText().equals("") || newIng_ingCal.getText().equals("");
    }

    @Override
    public void resetComponent() {
        newIng_ingName.setText("Enter Ingredient Name");
        newIng_ingCal.setText("Enter Ingredient Calorie");
        
    }

    @Override
    public void closeFrame() {
        // Close current frame
        IngredientMenu.this.dispose();
    }
}
