package RecipeNow;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Youngmin
 */
public class NewUserView extends javax.swing.JFrame implements GuiHelper {

    private DatabaseHelper db;
    private boolean isAuthenticated = false;
    private String username;
    private int userid;
    private NewUserCntl newUserCntl;

    public NewUserView(NewUserCntl newUserCntl) {
        this.db = new DatabaseHelper();
        this.newUserCntl = newUserCntl;
        initComponents();
        getRootPane().setDefaultButton(loginPage_Login);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPage_Login = new javax.swing.JButton();
        loginPage_userName = new javax.swing.JTextField();
        loginPage_passWord = new javax.swing.JPasswordField();
        loginPage_registration = new javax.swing.JButton();
        loginPage_Delete = new javax.swing.JButton();
        loginPage_printAccounts = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Login");

        loginPage_Login.setText("Login");
        loginPage_Login.setSelected(true);
        loginPage_Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginPage_LoginActionPerformed(evt);
            }
        });

        loginPage_userName.setToolTipText("");

        loginPage_passWord.setToolTipText("");

        loginPage_registration.setText("Register");
        loginPage_registration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginPage_registrationActionPerformed(evt);
            }
        });

        loginPage_Delete.setText("Delete Account");
        loginPage_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginPage_DeleteActionPerformed(evt);
            }
        });

        loginPage_printAccounts.setText("Print Account List");
        loginPage_printAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginPage_printAccountsActionPerformed(evt);
            }
        });

        jLabel1.setText("Password");

        jLabel2.setText("Username");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loginPage_Login, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(loginPage_userName)
                            .addComponent(loginPage_passWord)
                            .addComponent(loginPage_registration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loginPage_Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loginPage_printAccounts, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))))
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginPage_userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginPage_passWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(loginPage_Login)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginPage_registration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginPage_Delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginPage_printAccounts)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void loginPage_LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginPage_LoginActionPerformed
        // Check if login and pw text fields are filled 
        boolean checkNull = checkNull();
        if (!checkNull) {
            String userName = loginPage_userName.getText();
            String userPw = new String(loginPage_passWord.getPassword());
            String query = ("SELECT * FROM recipe_users");
            ResultSet res = null;

            // Get data from mysql
            try {
                res = this.db.getQuerySet(query);
                // Get resultset from MySQL
            } catch (SQLException ex) {
                System.out.println("Failed to get resultset from MySQL");
            }

            // Run through resultset
            boolean auth = false;
            boolean user = false;

            try {
                while (res.next()) {
                    //System.out.println("UserId: " +  res.getString("userID") + " User: " + res.getString("username") + "; Password: " + res.getString("password"));
                    if (res.getString("username").trim().equals(userName)) {
                        user = true;
                        if (res.getString("password").trim().equals(userPw)) {
                            // Authenticated
                            this.isAuthenticated = true;
                            this.userid = res.getInt("userID");
                            this.username = userName;
                            JOptionPane.showMessageDialog(rootPane, "Login Success \nUserid: " + this.userid
                                    + "\nUsername: " + this.username, "Success", HEIGHT);

                            auth = true;
                            // Go to Main JFrame
                            MainMenu mainFrame = new MainMenu(userid, username, db);
                            mainFrame.setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("Failed to get resultset from MySQL");
            }
            if (!user && !auth) {
                int register = JOptionPane.showConfirmDialog(rootPane, "That username does not exist, would you like to register?", "Nonexistant User", JOptionPane.YES_NO_OPTION);
                if (register == JOptionPane.YES_OPTION) {
                    loginPage_registrationActionPerformed(evt);
                }
            } else if (!auth) {
                JOptionPane.showMessageDialog(rootPane, "Authentication Failed, incorrect password", "Error", HEIGHT);
            }

        }
    }//GEN-LAST:event_loginPage_LoginActionPerformed

    private void loginPage_registrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginPage_registrationActionPerformed

        // Check if login and pw text fields are filled 
        boolean checkNull = checkNull();
        boolean hasDuplicate;
        if (!checkNull) {

            // Registration code by Tim
            String username = loginPage_userName.getText();
            String password = new String(loginPage_passWord.getPassword());
            //System.out.println(password);
            //String IQuery = "INSERT INTO `recipe_users`(`username`,`password`) VALUES('" + username + "', '" + password + "')";
            //System.out.println(IQuery);//print on console
            try {
                hasDuplicate = this.db.userInsertIntoTable(username, password);
                if (hasDuplicate) {
                    System.out.println("Registration failed");
                    JOptionPane.showMessageDialog(rootPane, "The username is already taken or Server Connection has failed", "Error", HEIGHT);
                } else {
                    System.out.println("Registration Success " + " Username: " + username + " Password: " + password);
                    JOptionPane.showMessageDialog(rootPane, "Registration Success", "Success", HEIGHT);
                    loginPage_LoginActionPerformed(evt);
                }
            } catch (SQLException ex) {
                //System.out.println("Duplicate Username exits or Connection Failed");

            }

            try {
                this.db.printUserTable();
            } catch (SQLException ex) {
                Logger.getLogger(NewUserView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loginPage_registrationActionPerformed

    private void loginPage_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginPage_DeleteActionPerformed
        // Check if login and pw text fields are filled 
        boolean checkNull = checkNull();

        String userName = loginPage_userName.getText();
        String userPw = String.valueOf(loginPage_passWord.getPassword());

        if (!checkNull) {
            String query = "SELECT * FROM recipe_users WHERE username = '" + userName + "'";
            ResultSet res;
            try {
                res = db.getQuerySet(query);
                if (res.first()) {
                    if (res.getString("password").trim().equals(userPw)) {
                        int userID = res.getInt("userID");
                        JOptionPane.showMessageDialog(rootPane, "You may delete this account now \nUserid: " + userID
                                + "\nUsername: " + userName, "Delete Account?", HEIGHT);
                        boolean deleteSuccess = this.db.deleteAccount(userName);
                        if (deleteSuccess) {
                            JOptionPane.showMessageDialog(rootPane, "Account deleted\nUserid: " + userID
                                    + "\nUsername: " + userName, "Deleted Account", HEIGHT);
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Account was not deleted\nUser ID: " + userID, "Error", HEIGHT);
                        }
                        resetComponent();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "The password provided was incorrect", "Incorrect Password", HEIGHT);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "No account with that username exists", "No account", HEIGHT);
                }
            } catch (SQLException ex) {
                System.out.println("SQL Exception: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_loginPage_DeleteActionPerformed

    private void loginPage_printAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginPage_printAccountsActionPerformed
        try {
            this.db.printUserTable();
        } catch (SQLException ex) {
            System.out.println("SQL Exception: " + ex.getMessage());
        }
    }//GEN-LAST:event_loginPage_printAccountsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton loginPage_Delete;
    private javax.swing.JButton loginPage_Login;
    private javax.swing.JPasswordField loginPage_passWord;
    private javax.swing.JButton loginPage_printAccounts;
    private javax.swing.JButton loginPage_registration;
    private javax.swing.JTextField loginPage_userName;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean checkNull() {
        // Check if the two textfields are null or default    
        return loginPage_userName.getText().equals("") || loginPage_passWord.getPassword().length == 0;
    }

    @Override
    public void resetComponent() {
        loginPage_userName.setText("");
        loginPage_passWord.setText("");
    }

    @Override
    public void closeFrame() {

        // To be updated
    }
}
